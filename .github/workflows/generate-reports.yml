name: Generate Jira Reports

on:
  workflow_dispatch:

jobs:
  generate-reports:
    runs-on: ubuntu-latest
    
    environment: prod
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Verify required secrets
      env:
        JIRA_SERVER_URL: ${{ secrets.JIRA_SERVER_URL }}
        JIRA_USERNAME: ${{ secrets.JIRA_USERNAME }}
        JIRA_PROJECT_KEY: ${{ secrets.JIRA_PROJECT_KEY }}
        JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
      run: |
        echo "🔍 Verificando configuración..."
        if [ -z "$JIRA_SERVER_URL" ]; then
          echo "❌ ERROR: JIRA_SERVER_URL secret not set"
          exit 1
        fi
        if [ -z "$JIRA_USERNAME" ]; then
          echo "❌ ERROR: JIRA_USERNAME secret not set"
          exit 1
        fi
        if [ -z "$JIRA_PROJECT_KEY" ]; then
          echo "❌ ERROR: JIRA_PROJECT_KEY secret not set"
          exit 1
        fi
        if [ -z "$JIRA_API_TOKEN" ]; then
          echo "❌ ERROR: JIRA_API_TOKEN secret not set"
          exit 1
        fi
        echo "✅ Todos los secrets están configurados"
      
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        cd reports
        pip install -r requirements.txt
        

        
    - name: Generate Burndown Chart
      id: burndown
      continue-on-error: true
      env:
        JIRA_SERVER_URL: ${{ secrets.JIRA_SERVER_URL }}
        JIRA_USERNAME: ${{ secrets.JIRA_USERNAME }}
        JIRA_PROJECT_KEY: ${{ secrets.JIRA_PROJECT_KEY }}
        JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
      run: |
        cd reports
        echo "🔥 Generating Burndown Chart..."
        python burndown_chart.py
        
        # Find the generated PDF
        BURNDOWN_PDF=$(ls burndown_chart_*.pdf 2>/dev/null | head -1)
        if [ -f "$BURNDOWN_PDF" ]; then
          echo "burndown_success=true" >> $GITHUB_OUTPUT
          echo "burndown_file=$BURNDOWN_PDF" >> $GITHUB_OUTPUT
          echo "✅ Burndown Chart generated: $BURNDOWN_PDF"
        else
          echo "burndown_success=false" >> $GITHUB_OUTPUT
          echo "❌ Burndown Chart generation failed"
        fi
        
    - name: Generate Velocity Chart  
      id: velocity
      continue-on-error: true
      env:
        JIRA_SERVER_URL: ${{ secrets.JIRA_SERVER_URL }}
        JIRA_USERNAME: ${{ secrets.JIRA_USERNAME }}
        JIRA_PROJECT_KEY: ${{ secrets.JIRA_PROJECT_KEY }}
        JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
      run: |
        cd reports
        echo "📈 Generating Velocity Chart..."
        python velocity_chart.py
        
        # Find the generated PDF
        VELOCITY_PDF=$(ls velocity_chart_*.pdf 2>/dev/null | head -1)
        if [ -f "$VELOCITY_PDF" ]; then
          echo "velocity_success=true" >> $GITHUB_OUTPUT
          echo "velocity_file=$VELOCITY_PDF" >> $GITHUB_OUTPUT
          echo "✅ Velocity Chart generated: $VELOCITY_PDF"
        else
          echo "velocity_success=false" >> $GITHUB_OUTPUT
          echo "❌ Velocity Chart generation failed"
        fi
        
    - name: Generate Business Value Chart
      id: business_value
      continue-on-error: true
      env:
        JIRA_SERVER_URL: ${{ secrets.JIRA_SERVER_URL }}
        JIRA_USERNAME: ${{ secrets.JIRA_USERNAME }}
        JIRA_PROJECT_KEY: ${{ secrets.JIRA_PROJECT_KEY }}
        JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
      run: |
        cd reports
        echo "💰 Generating Business Value Chart..."
        python business_value_chart.py
        
        # Find the generated PDF
        BUSINESS_VALUE_PDF=$(ls business_value_chart_*.pdf 2>/dev/null | head -1)
        if [ -f "$BUSINESS_VALUE_PDF" ]; then
          echo "business_value_success=true" >> $GITHUB_OUTPUT
          echo "business_value_file=$BUSINESS_VALUE_PDF" >> $GITHUB_OUTPUT
          echo "✅ Business Value Chart generated: $BUSINESS_VALUE_PDF"
        else
          echo "business_value_success=false" >> $GITHUB_OUTPUT
          echo "❌ Business Value Chart generation failed"
        fi
        
    - name: Generate Release Burndown Chart
      id: release_burndown
      continue-on-error: true
      env:
        JIRA_SERVER_URL: ${{ secrets.JIRA_SERVER_URL }}
        JIRA_USERNAME: ${{ secrets.JIRA_USERNAME }}
        JIRA_PROJECT_KEY: ${{ secrets.JIRA_PROJECT_KEY }}
        JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
      run: |
        cd reports
        echo "📉 Generating Release Burndown Chart..."
        python release_burndown_chart.py
        
        # Find the generated PDF
        RELEASE_BURNDOWN_PDF=$(ls release_burndown_chart_*.pdf 2>/dev/null | head -1)
        if [ -f "$RELEASE_BURNDOWN_PDF" ]; then
          echo "release_burndown_success=true" >> $GITHUB_OUTPUT
          echo "release_burndown_file=$RELEASE_BURNDOWN_PDF" >> $GITHUB_OUTPUT
          echo "✅ Release Burndown Chart generated: $RELEASE_BURNDOWN_PDF"
        else
          echo "release_burndown_success=false" >> $GITHUB_OUTPUT
          echo "❌ Release Burndown Chart generation failed"
        fi
        
    - name: List generated files
      run: |
        cd reports
        echo "📁 Generated files:"
        ls -la *.pdf 2>/dev/null || echo "No PDF files found"
        
    - name: Upload Burndown Chart
      if: steps.burndown.outputs.burndown_success == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: burndown-chart
        path: reports/${{ steps.burndown.outputs.burndown_file }}
        retention-days: 120
        
    - name: Upload Velocity Chart
      if: steps.velocity.outputs.velocity_success == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: velocity-chart
        path: reports/${{ steps.velocity.outputs.velocity_file }}
        retention-days: 120
        
    - name: Upload Business Value Chart
      if: steps.business_value.outputs.business_value_success == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: business-value-chart
        path: reports/${{ steps.business_value.outputs.business_value_file }}
        retention-days: 120
        
    - name: Upload Release Burndown Chart
      if: steps.release_burndown.outputs.release_burndown_success == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: release-burndown-chart
        path: reports/${{ steps.release_burndown.outputs.release_burndown_file }}
        retention-days: 120
        
    - name: Upload All Reports (Combined)
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: all-jira-reports
        path: reports/*.pdf
        retention-days: 120
        
    - name: Generate Summary Report
      if: always()
      env:
        JIRA_PROJECT_KEY: ${{ secrets.JIRA_PROJECT_KEY }}
      run: |
        cd reports
        echo "# 📊 Jira Reports Generation Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Generated on:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "**Project:** $JIRA_PROJECT_KEY" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📈 Report Status" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.burndown.outputs.burndown_success }}" == "true" ]; then
          echo "- ✅ **Burndown Chart** - Successfully generated" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ **Burndown Chart** - Generation failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ steps.velocity.outputs.velocity_success }}" == "true" ]; then
          echo "- ✅ **Velocity Chart** - Successfully generated" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ **Velocity Chart** - Generation failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ steps.business_value.outputs.business_value_success }}" == "true" ]; then
          echo "- ✅ **Business Value Chart** - Successfully generated" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ **Business Value Chart** - Generation failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ steps.release_burndown.outputs.release_burndown_success }}" == "true" ]; then
          echo "- ✅ **Release Burndown Chart** - Successfully generated" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ **Release Burndown Chart** - Generation failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📁 Download Reports" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Check the **Artifacts** section below to download the generated PDF reports." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "*Reports generated by MISO Proyecto Integrador*" >> $GITHUB_STEP_SUMMARY